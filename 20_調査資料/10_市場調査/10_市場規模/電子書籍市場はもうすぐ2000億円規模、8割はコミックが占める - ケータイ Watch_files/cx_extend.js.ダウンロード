/*
 * cx-scrolldepth.js
 * Copyright (C) 2016 Cxense ASA, 2018 Impress Corp.
 *
 * Usage: window.cXcustom("scrollDepth", eventHandler, trackingMethod, elementId, baselineDelay);
 *   eventHandler: callback function to be called when scroll depth reaches 25%, 50%, 75%, 100%
 *   trackingMethod:
 *      0 - measure percentage relative to the entire page
 *      1 - measure percentage of article
 *      2 - measure percentage relative to the end of the article
 *   elementId: ID of the element (N/A for trackingMethod == 0)
 *      if trackingMethod == 1: element encapuslating the article body
 *      if trackingMethod == 2: element at the end of the article
 *   isClassName: true if the elementId is a class name of an element
 *   baselineDelay: delay in milliseconds before eventHandler is called for baseline, -1 to disable
 *      'baseline' '0%' event as well as initial visibility on first view
 *
 * Usage: window.cXcustom("externalLink", eventHandler);
 *
 * Usage: window.cXcustom("clickedTracker", eventHandler);
 */
(function() {
  /**
   * External link tracking
   */
  var cxExternalLinkTracker = (function(){
    var _cpMaxLen = 40;
    var _eventHandler;
    var _targetArea = {
      "affiliate_tag_amazon_2": "アマゾン枠",
      "outer":"関連リンク枠"
    };
    function _init(eventHandler) {
      _eventHandler = eventHandler;
      _startTracking();
    }
    
    function _startTracking() {
        window.addEventListener('mouseup', _onClickEvent, true);
        window.addEventListener('contextmenu', _onClickEvent, true);
    }
    
    function _stopTracking() {
        window.removeEventListener('mouseup', _onClickEvent, true);
        window.removeEventListener('contextmenu', _onClickEvent, true);
    }
    
    function _onClickEvent(event) {
      try {
        var ev = event || window.event;
        var exturl = "";
        var amazonid = "";
        var title = "";
        var text = "";
        var extdomain = "";
        var domain = "";
        
        if(document.title && typeof(document.title) == 'string'){
          title = document.title;
        }
        if(document.domain && typeof(document.domain) == 'string'){
          domain = document.domain;
        }
        
        if (ev) {
          var el = ev.target || ev.srcElement;
          for(var i = 0; (i < 20) && (el) && el.nodeName.toLowerCase() !== 'body'; i++) {
            if(el.nodeType === 1 && el.nodeName.toLowerCase() === 'a') {
              if(typeof el.href === 'string') {
                exturl = el.href;
                extdomain = el.href.match(/^(.*?:\/\/)(.*?)([a-z0-9][a-z0-9\-]{1,63}\.[a-z\.]{2,6})[\:[0-9]*]?([\/].*?)?$/i)[3];
              }
              if(text.length == 0 && el.innerText.length > 0) {
                text = el.innerText;
              }
              if(typeof(extdomain) == 'string' && extdomain == 'amazon.co.jp'){
                amazonid = el.href.match(/[A-Z\d]{10,13}?/)[0];
              }
            }
            var areaName = _getAreaName(el, el.parentNode ? el.parentNode.childNodes : []);
            if(areaName) {
              break;
            }
            el = el.parentNode;
          }
          if(areaName && exturl) {
            text = text || exturl;
            _eventHandler(
              areaName.slice(0, _cpMaxLen),
              {
                "exturl": exturl.slice(0, _cpMaxLen),
                "amazonid": amazonid,
                "title": title.slice(0, _cpMaxLen),
                "text": text.slice(0, _cpMaxLen),
                "extdomain": extdomain.slice(0, _cpMaxLen),
                "domain": domain.slice(0, _cpMaxLen)
              }
            );
          }
        }
      } catch (e) { }
      return true;
    }
    function _getAreaName(el, neighborNodes) {
      if(el.className) {
        var classNames = el.className.split(" ");
        for(var i=0; i<classNames.length; i++) {
          if(Object.keys(_targetArea).indexOf(classNames[i])!=-1) {
            return _targetArea[classNames[i]];
          }
        }
      }
    }
    return {
      init: function(eventHandler) {
        _init(eventHandler);
      }
    }
  })();
  
  function _isRobot() {
    var robot_strings = ["preview", "phantomjs", "spider", "crawl", "cxense", "slurp", "read ahead agent"];
    var re_bot = /\bbot|bot\b/;
    var ua = navigator.userAgent.toLowerCase();
    if(re_bot.test(ua)) {
      return true;
    } else {
      for(var i=0; i<robot_strings.length; i++) {
        if(ua.indexOf(robot_strings[i])!=-1) {
          return true;
        }
      }
    }
    return ua.indexOf("mozilla") == 0 && ua.indexOf(" ") == -1;
  }

  /**
   * clicked area/link tracking
   */
  var cx_clickedTracker = (function(){
    var _targetRegex = /^data-cx-/i;
    var _instance;
    var _intRegex;
    var _eventHandler;
    var _cpMaxLen = 40;
    function _init(eventHandler) {
      _eventHandler = eventHandler;
      _startTracking();
      _intRegex = new RegExp(location.origin);
      return true;
    }
    function _startTracking() {
      window.addEventListener('mouseup', _onClickEvent, false);
      window.addEventListener('contextmenu', _onClickEvent, false);
    }
    function _stopTracking() {
      window.removeEventListener('mouseup', _onClickEvent, false);
      window.removeEventListener('contextmenu', _onClickEvent, false);
    }
    function _setTarget(target) {
      if(target instanceof RegExp) {
        _targetRegex = target;
      }
    }
    function _isInternal(url) {
      return url.match(_intRegex) || url.charAt(0) === "/" || url.charAt(0) === ".";
    }
    function _createCustomSendEvent(prnd) {
      return function(type, customParameters, providedArgs, segmentIds) {
        customParameters = customParameters || {};
        var args = cX.library.combineArgs(cX.library.m_customEventAttributes || {}, providedArgs || {});
        var identities = args.identities || [];
        if (!cX.Array.some(identities, function(id) { return id.type === 'cx'; })) {
          identities.push({ id: cX.getUserId(), type: 'cx' });
        }
        var apiFormattedCustomParameters = [];
        cX.Object.forEach(customParameters, function(value, name) {
          apiFormattedCustomParameters.push({ group: name, item: value, type: typeof(value) === 'number' ? 'number' : 'string' });
        });
        var requestObject = {
          events: [{
            type: type,
            rnd: cX.library._randomString(),
            siteId: cX.library.m_siteId,
            prnd: prnd,
            userIds: identities,
            origin: args.origin,
            segmentIds: segmentIds,
            customParameters: apiFormattedCustomParameters
          }]
        };
        var url = 'https://comcluster.cxense.com/dmp/push?callback={'+'{callback}'+'}' +
          '&persisted=' + encodeURIComponent(args.persistedQueryId) +
          '&json=' + encodeURIComponent(cX.JSON.stringify(requestObject));
        cX.jsonpRequest(url, function() { if (args.callback) { args.callback(); } }, { synchronous: args.synchronous });
      };
    }
    function _sendClickedArea() {
      try {
        if (typeof localStorage === 'object' && typeof localStorage.getItem === 'function') {
          var keyName = "cx_clickedTracker";
          var clickedArea = JSON.parse(localStorage.getItem(keyName));
          if(clickedArea) {
            localStorage.removeItem(keyName);
            var lastClicked = clickedArea["time"] || 0;
            var now = Math.round(new Date().getTime() / 1000);
            var fromInternal = document.referrer === clickedArea["url"];
            if (isFinite(lastClicked) && lastClicked <= now && (lastClicked > now - 30 * 60) && fromInternal) {
              _eventHandler(_createCustomSendEvent(clickedArea.prnd), clickedArea["data"]);
            }
          }
        }
      } catch (e) { }
    }
    function _storeLocalStorage(data) {
      if (typeof localStorage === 'object' && typeof localStorage.setItem === 'function') {
        var now = Math.round(new Date().getTime() / 1000);
        localStorage.setItem("cx_clickedTracker", JSON.stringify({
          "time": now,
          "url": location.href,
          "prnd": cX.library.m_rnd,
          "data": data
        }));
      }
    }
    function _onClickEvent(event) {
      var ev = event || window.event;
      var param = {};
      var href = {};
      var hrefTarget;
      if(ev) {
        var el = ev.target || ev.srcElement;
        for(var i = 0; (i < 20) && (el) && el.nodeName.toLowerCase() !== 'body'; i++) {
          if(el.nodeType === 1 && el.nodeName.toLowerCase() === "a") {
            hrefTarget = el.target || "_self";
            href["desturl"] = (el.href || "").slice(0,_cpMaxLen);
            href["text"] = (el.innerText || el.href || "").slice(0,_cpMaxLen).replace(/[\x00-\x1f\x7f]/g, '').replace(/\x20+/g, "\x20");
          }
          if(el.nodeType === 1 && "attributes" in el) {
            for(var j = 0; j < el["attributes"].length; j++) {
              var attr = el["attributes"][j];
              if(attr.name.toLowerCase().match(_targetRegex)) {
                var attrName = "clk_" + attr.name.toLowerCase().replace(_targetRegex,"").slice(0,20).replace(/[\x00-\x1f\x7f]/g, '').replace(/\x20+/g, "-");
                if(!(attrName in param)) {
                  param[attrName] = attr.value.slice(0,_cpMaxLen).replace(/[\x00-\x1f\x7f]/g, '').replace(/\x20+/g, "\x20");
                }
              }
            }
          }
          el = el.parentNode;
        }
      }
      if(Object.keys(param).length > 0 && Object.keys(href).length > 0) {
        Object.assign(param, href);
        if(hrefTarget === "_blank") {
          _eventHandler(cX.sendEvent, param);
        }
        else {
          if("desturl" in href && _isInternal(href["desturl"])) {
            _storeLocalStorage(param);
          }
          else {
            _eventHandler(cX.sendEvent, param);
          }
        }
      }
      return true;
    }
    return {
      init: function(eventHandler) {
        if (!_instance) {
          _instance = _init(eventHandler);
          _sendClickedArea();
        }
        return _instance;
      },
      stop: function(eventHandler) {
        _stopTracking();
      },
      setTarget: function(target) {
        return _setTarget(target);
      }
    }
  })();
  
  /*
   * Usage: cxScrollDepth.init(eventHandler, trackingMethod, elementId, baselineDelay);
   */
  var cxScrollDepth = (function() {
    var _instance;
    var _eventHandler;
    var _element;
    var _resolution;
    var _prevVal;
    
    function _init(eventHandler, trackingMethod, elementId, isClassName, baselineDelay) {
      _eventHandler = eventHandler;
      if (isClassName) {
        _element = document.getElementsByClassName(elementId)[0];
      } else {
        _element = document.getElementById(elementId);
      }
      _resolution = 20;
      _prevVal = 0;
      switch (trackingMethod) {
        case 0:
          _calcDepth = _calcDepth0;
          break;
        case 1:
          _calcDepth = _calcDepth1;
          break;
        default:
          _calcDepth = _calcDepth2;
          break;
      }
      _startScrollDepthTracking(baselineDelay);
    };
    return {
      init: function(eventHandler,trackingMethod,elementId,isClassName,baselineDelay) {
        if (!_instance) {
          _instance = _init(eventHandler,trackingMethod,elementId,isClassName,baselineDelay);
        }
        return _instance;
      }
    };
    
    function _calcDepth0() {
      var pos = cX.getScrollPos();
      var windowSize = cX.getWindowSize();
      var docSize = cX.getDocumentSize();
      var percentage = (pos.top + windowSize.height) / docSize.height * 100;
      percentage = Math.ceil(percentage);
      if (percentage > 100) { percentage = 100; }
      var depth = Math.floor(percentage / _resolution);
      var reportVal = depth * _resolution;
      if (_prevVal < reportVal && reportVal >= _resolution) {
        for (var val = _prevVal + _resolution; val < reportVal; val += _resolution) {
          _eventHandler(val);
        }
        _eventHandler(reportVal);
        _prevVal = reportVal;
      }
    }
    
    function _calcDepth1() {
      var pos = cX.getScrollPos();
      var windowSize = cX.getWindowSize();
      var bodyElementPos = cX.getElementPosition(_element);
      if (pos.top + windowSize.height > bodyElementPos.top) {
        var percentage = (pos.top + windowSize.height - bodyElementPos.top) / _element.offsetHeight * 100;
        percentage = Math.ceil(percentage);
        if (percentage > 100) { percentage = 100; }
        var depth = Math.floor(percentage / _resolution);
        var reportVal = depth * _resolution;
        if (_prevVal < reportVal && reportVal >= _resolution) {
          for (var val = _prevVal + _resolution; val < reportVal; val += _resolution) {
            _eventHandler(val);
          }
          _eventHandler(reportVal);
          _prevVal = reportVal;
        }
      }
    }
    
    function _calcDepth2() {
      var pos = cX.getScrollPos();
      var windowSize = cX.getWindowSize();
      var bodyElementPos = cX.getElementPosition(_element);
      var percentage = (pos.top + windowSize.height) / bodyElementPos.top * 100;
      percentage = Math.ceil(percentage);
      if (percentage > 100) { percentage = 100; }
      var depth = Math.floor(percentage / _resolution);
      var reportVal = depth * _resolution;
      if (_prevVal < reportVal && reportVal >= _resolution) {
        for (var val = _prevVal + _resolution; val < reportVal; val += _resolution) {
          _eventHandler(val);
        }
        _eventHandler(reportVal);
        _prevVal = reportVal;
      }
    }
    
    function _onScroll() {
      if (_prevVal >= 100) return;
      _calcDepth();
    };
    
    /*
     * Throttle function borrowed from:
     * Underscore.js 1.5.2
     * http://underscorejs.org
     * (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     * Underscore may be freely distributed under the MIT license.
     */
    
    function throttle(func, wait) {
      var context, args, result;
      var timeout = null;
      var previous = 0;
      var later = function() {
        previous = new Date;
        timeout = null;
        result = func.apply(context, args);
      };
      return function() {
        var now = new Date;
        if (!previous) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0) {
          clearTimeout(timeout);
          timeout = null;
          previous = now;
          result = func.apply(context, args);
        } else if (!timeout) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      };
    }
    
    function _startScrollDepthTracking(baselineDelay) {
      if (baselineDelay > 0) {
        setTimeout(function() {
          _onScroll();
        },baselineDelay);
      }
      window.onscroll = throttle(_onScroll, 500);
    };
  })();
  
  /**
   * Common (Queue and execute task)
   */
  var _cXcustom = function () { (window.cXcustom.q = window.cXcustom.q || []).push(arguments); _queueExecute(); };
  _cXcustom.q = window.cXcustom && window.cXcustom.q ? window.cXcustom.q : [];
  window.cXcustom = _cXcustom;
  
  _queueExecute();
  
  function _queueExecute() {
    while (window.cXcustom.q && window.cXcustom.q.length > 0) {
      var command = window.cXcustom.q.shift();
      try {
        if (command[0] === "scrollDepth") {
          cxScrollDepth.init(command[1], command[2], command[3], command[4], command[5]);
        }else if(command[0] === "externalLink") {
          cxExternalLinkTracker.init(command[1]);
        }else if(command[0] === "clickedTracker") {
          cx_clickedTracker.init(command[1]);
        }
      } catch (e) { }
    }
  }
})();
